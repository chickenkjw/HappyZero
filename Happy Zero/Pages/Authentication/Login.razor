@page "/Login"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Text.Json.Serialization
@using Inhu.Authentication;
@using Newtonsoft.Json;
@using System.Text;
@inject NavigationManager NavigationManager
@inject DataProvider dataProviedr
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>로그인</PageTitle>

<div id="auth-box">
    <h4>로그인</h4>

    <div class="form-group mt-5">
        <label class="form-label" for="id">아이디</label>
        <input class="form-control" type="text" @bind="user.Id" placeholder="아이디를 입력하세요" name="id"/>
    </div>

    <div class="form-group mt-3">
        <label class="form-label" for="password">비밀번호</label>
        <input class="form-control" type="password" @bind="user.Password" placeholder="비밀번호를 입력하세요" name="password"/>
    </div>

    <p class="text-danger fs-5 mt-4">@errorMessage</p>

    <button class="btn btn-primary mt-4 mx-auto d-flex" @onclick="SignIn">로그인</button>
</div>


@code {
    private class LoginUser {
        [Required]
        public string Id { get; set; }
        [Required]
        public string Password { get; set; }
    }

    private LoginUser user = new();

    private string errorMessage = string.Empty;

    private async Task SignIn() {
        //string json = JsonConvert.SerializeObject(user);

        /*errorMessage = JsonConvert.SerializeObject(new UserSession
            {
            Name = "annyong",
            Role = "User",
            Email = "a@a.com",
            Uid = "12234"
        });*/

        using(var httpClient = new HttpClient()) {
            //HttpContent content = new StringContent(json, Encoding.UTF8, "application/json");
            var response = await httpClient.GetAsync($"http://localhostinha.kro.kr:8080/api/test/account/signin?id={user.Id}&pw={user.Password}");
            var ok = await response.Content.ReadAsStringAsync();

            var loginResponse = await httpClient.GetAsync($"http://localhostinha.kro.kr:8080/api/test/account/getinfo?id={user.Id}");
            var responseContent = await loginResponse.Content.ReadAsStringAsync();
            var token = JsonConvert.DeserializeObject<UserSession>(responseContent);


            if(response.IsSuccessStatusCode && ok.Equals("true") && token is not null) {
                var auth = (AuthStateProvider)AuthStateProvider;
                await auth.UpdateAuthenticaitonState(token);
                await dataProviedr.SetUserData(token!);
                NavigationManager.NavigateTo("/");
                return;
            }
            else {
                errorMessage = "로그인에 실패하였습니다. 잠시 후 다시 시도해 주십시오";
            }
        }

        return;
    }
}
